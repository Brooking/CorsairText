// Code generated by MockGen. DO NOT EDIT.
// Source: screenprinter.go

// Package mockscreenprinter is a generated GoMock package.
package mockscreenprinter

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockScreenPrinter is a mock of ScreenPrinter interface
type MockScreenPrinter struct {
	ctrl     *gomock.Controller
	recorder *MockScreenPrinterMockRecorder
}

// MockScreenPrinterMockRecorder is the mock recorder for MockScreenPrinter
type MockScreenPrinterMockRecorder struct {
	mock *MockScreenPrinter
}

// NewMockScreenPrinter creates a new mock instance
func NewMockScreenPrinter(ctrl *gomock.Controller) *MockScreenPrinter {
	mock := &MockScreenPrinter{ctrl: ctrl}
	mock.recorder = &MockScreenPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScreenPrinter) EXPECT() *MockScreenPrinterMockRecorder {
	return m.recorder
}

// Print mocks base method
func (m *MockScreenPrinter) Print(a ...interface{}) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Print", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Print indicates an expected call of Print
func (mr *MockScreenPrinterMockRecorder) Print(a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Print", reflect.TypeOf((*MockScreenPrinter)(nil).Print), a...)
}

// Printf mocks base method
func (m *MockScreenPrinter) Printf(format string, a ...interface{}) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Printf", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Printf indicates an expected call of Printf
func (mr *MockScreenPrinterMockRecorder) Printf(format interface{}, a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockScreenPrinter)(nil).Printf), varargs...)
}

// Println mocks base method
func (m *MockScreenPrinter) Println(a ...interface{}) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Println", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Println indicates an expected call of Println
func (mr *MockScreenPrinterMockRecorder) Println(a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Println", reflect.TypeOf((*MockScreenPrinter)(nil).Println), a...)
}
