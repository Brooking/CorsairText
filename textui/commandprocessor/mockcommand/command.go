// Code generated by MockGen. DO NOT EDIT.
// Source: command.go

// Package mockcommand is a generated GoMock package.
package mockcommand

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// ShowAdjacency mocks base method
func (m *MockCommand) ShowAdjacency() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowAdjacency")
	ret0, _ := ret[0].(error)
	return ret0
}

// ShowAdjacency indicates an expected call of ShowAdjacency
func (mr *MockCommandMockRecorder) ShowAdjacency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowAdjacency", reflect.TypeOf((*MockCommand)(nil).ShowAdjacency))
}

// ShowAllHelp mocks base method
func (m *MockCommand) ShowAllHelp() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowAllHelp")
	ret0, _ := ret[0].(error)
	return ret0
}

// ShowAllHelp indicates an expected call of ShowAllHelp
func (mr *MockCommandMockRecorder) ShowAllHelp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowAllHelp", reflect.TypeOf((*MockCommand)(nil).ShowAllHelp))
}

// ShowHelp mocks base method
func (m *MockCommand) ShowHelp(command string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowHelp", command)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShowHelp indicates an expected call of ShowHelp
func (mr *MockCommandMockRecorder) ShowHelp(command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowHelp", reflect.TypeOf((*MockCommand)(nil).ShowHelp), command)
}

// ShowLook mocks base method
func (m *MockCommand) ShowLook() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowLook")
	ret0, _ := ret[0].(error)
	return ret0
}

// ShowLook indicates an expected call of ShowLook
func (mr *MockCommandMockRecorder) ShowLook() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowLook", reflect.TypeOf((*MockCommand)(nil).ShowLook))
}

// Obey mocks base method
func (m *MockCommand) Obey(commandLine string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Obey", commandLine)
	ret0, _ := ret[0].(error)
	return ret0
}

// Obey indicates an expected call of Obey
func (mr *MockCommandMockRecorder) Obey(commandLine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Obey", reflect.TypeOf((*MockCommand)(nil).Obey), commandLine)
}
