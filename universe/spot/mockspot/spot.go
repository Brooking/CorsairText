// Code generated by MockGen. DO NOT EDIT.
// Source: spot.go

// Package mockspot is a generated GoMock package.
package mockspot

import (
	action "corsairtext/universe/action"
	spot "corsairtext/universe/spot"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSpot is a mock of Spot interface
type MockSpot struct {
	ctrl     *gomock.Controller
	recorder *MockSpotMockRecorder
}

// MockSpotMockRecorder is the mock recorder for MockSpot
type MockSpotMockRecorder struct {
	mock *MockSpot
}

// NewMockSpot creates a new mock instance
func NewMockSpot(ctrl *gomock.Controller) *MockSpot {
	mock := &MockSpot{ctrl: ctrl}
	mock.recorder = &MockSpotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSpot) EXPECT() *MockSpotMockRecorder {
	return m.recorder
}

// Actions mocks base method
func (m *MockSpot) Actions() []action.ActionDescription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Actions")
	ret0, _ := ret[0].([]action.ActionDescription)
	return ret0
}

// Actions indicates an expected call of Actions
func (mr *MockSpotMockRecorder) Actions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Actions", reflect.TypeOf((*MockSpot)(nil).Actions))
}

// Act mocks base method
func (m *MockSpot) Act(arg0 action.Action) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Act", arg0)
}

// Act indicates an expected call of Act
func (mr *MockSpotMockRecorder) Act(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Act", reflect.TypeOf((*MockSpot)(nil).Act), arg0)
}

// AddChild mocks base method
func (m *MockSpot) AddChild(child spot.Spot) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddChild", child)
}

// AddChild indicates an expected call of AddChild
func (mr *MockSpotMockRecorder) AddChild(child interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChild", reflect.TypeOf((*MockSpot)(nil).AddChild), child)
}

// Description mocks base method
func (m *MockSpot) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description
func (mr *MockSpotMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockSpot)(nil).Description))
}

// Path mocks base method
func (m *MockSpot) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path
func (mr *MockSpotMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockSpot)(nil).Path))
}
