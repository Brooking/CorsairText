// Code generated by MockGen. DO NOT EDIT.
// Source: Information.go

// Package mockuniverse is a generated GoMock package.
package mockuniverse

import (
	universe "corsairtext/universe"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInformation is a mock of Information interface
type MockInformation struct {
	ctrl     *gomock.Controller
	recorder *MockInformationMockRecorder
}

// MockInformationMockRecorder is the mock recorder for MockInformation
type MockInformationMockRecorder struct {
	mock *MockInformation
}

// NewMockInformation creates a new mock instance
func NewMockInformation(ctrl *gomock.Controller) *MockInformation {
	mock := &MockInformation{ctrl: ctrl}
	mock.recorder = &MockInformationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInformation) EXPECT() *MockInformationMockRecorder {
	return m.recorder
}

// ListLocalCommands mocks base method
func (m *MockInformation) ListLocalCommands() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocalCommands")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// ListLocalCommands indicates an expected call of ListLocalCommands
func (mr *MockInformationMockRecorder) ListLocalCommands() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocalCommands", reflect.TypeOf((*MockInformation)(nil).ListLocalCommands))
}

// ListLocations mocks base method
func (m *MockInformation) ListLocations() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocations")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListLocations indicates an expected call of ListLocations
func (mr *MockInformationMockRecorder) ListLocations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocations", reflect.TypeOf((*MockInformation)(nil).ListLocations))
}

// ListAdjacentLocations mocks base method
func (m *MockInformation) ListAdjacentLocations() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAdjacentLocations")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListAdjacentLocations indicates an expected call of ListAdjacentLocations
func (mr *MockInformationMockRecorder) ListAdjacentLocations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAdjacentLocations", reflect.TypeOf((*MockInformation)(nil).ListAdjacentLocations))
}

// LocalLocation mocks base method
func (m *MockInformation) LocalLocation() *universe.View {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalLocation")
	ret0, _ := ret[0].(*universe.View)
	return ret0
}

// LocalLocation indicates an expected call of LocalLocation
func (mr *MockInformationMockRecorder) LocalLocation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalLocation", reflect.TypeOf((*MockInformation)(nil).LocalLocation))
}

// ListItems mocks base method
func (m *MockInformation) ListItems() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListItems")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListItems indicates an expected call of ListItems
func (mr *MockInformationMockRecorder) ListItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListItems", reflect.TypeOf((*MockInformation)(nil).ListItems))
}

// Inventory mocks base method
func (m *MockInformation) Inventory() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inventory")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Inventory indicates an expected call of Inventory
func (mr *MockInformationMockRecorder) Inventory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inventory", reflect.TypeOf((*MockInformation)(nil).Inventory))
}
