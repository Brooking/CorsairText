// Code generated by MockGen. DO NOT EDIT.
// Source: universe.go

// Package mockuniverse is a generated GoMock package.
package mockuniverse

import (
	action "corsairtext/universe/action"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUniverse is a mock of Universe interface
type MockUniverse struct {
	ctrl     *gomock.Controller
	recorder *MockUniverseMockRecorder
}

// MockUniverseMockRecorder is the mock recorder for MockUniverse
type MockUniverseMockRecorder struct {
	mock *MockUniverse
}

// NewMockUniverse creates a new mock instance
func NewMockUniverse(ctrl *gomock.Controller) *MockUniverse {
	mock := &MockUniverse{ctrl: ctrl}
	mock.recorder = &MockUniverseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUniverse) EXPECT() *MockUniverseMockRecorder {
	return m.recorder
}

// Actions mocks base method
func (m *MockUniverse) Actions() []action.ActionDescription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Actions")
	ret0, _ := ret[0].([]action.ActionDescription)
	return ret0
}

// Actions indicates an expected call of Actions
func (mr *MockUniverseMockRecorder) Actions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Actions", reflect.TypeOf((*MockUniverse)(nil).Actions))
}

// Act mocks base method
func (m *MockUniverse) Act(arg0 action.Action) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Act", arg0)
}

// Act indicates an expected call of Act
func (mr *MockUniverseMockRecorder) Act(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Act", reflect.TypeOf((*MockUniverse)(nil).Act), arg0)
}
