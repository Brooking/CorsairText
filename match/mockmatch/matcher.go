// Code generated by MockGen. DO NOT EDIT.
// Source: matcher.go

// Package mockmatch is a generated GoMock package.
package mockmatch

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMatcher is a mock of Matcher interface
type MockMatcher struct {
	ctrl     *gomock.Controller
	recorder *MockMatcherMockRecorder
}

// MockMatcherMockRecorder is the mock recorder for MockMatcher
type MockMatcherMockRecorder struct {
	mock *MockMatcher
}

// NewMockMatcher creates a new mock instance
func NewMockMatcher(ctrl *gomock.Controller) *MockMatcher {
	mock := &MockMatcher{ctrl: ctrl}
	mock.recorder = &MockMatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMatcher) EXPECT() *MockMatcherMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockMatcher) Add(word string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", word)
}

// Add indicates an expected call of Add
func (mr *MockMatcherMockRecorder) Add(word interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockMatcher)(nil).Add), word)
}

// Ingest mocks base method
func (m *MockMatcher) Ingest(wordList []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Ingest", wordList)
}

// Ingest indicates an expected call of Ingest
func (mr *MockMatcherMockRecorder) Ingest(wordList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ingest", reflect.TypeOf((*MockMatcher)(nil).Ingest), wordList)
}

// Match mocks base method
func (m *MockMatcher) Match(target string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", target)
	ret0, _ := ret[0].([]string)
	return ret0
}

// Match indicates an expected call of Match
func (mr *MockMatcherMockRecorder) Match(target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockMatcher)(nil).Match), target)
}

// PrintOrdered mocks base method
func (m *MockMatcher) PrintOrdered() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintOrdered")
}

// PrintOrdered indicates an expected call of PrintOrdered
func (mr *MockMatcherMockRecorder) PrintOrdered() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintOrdered", reflect.TypeOf((*MockMatcher)(nil).PrintOrdered))
}

// PrintTree mocks base method
func (m *MockMatcher) PrintTree() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintTree")
}

// PrintTree indicates an expected call of PrintTree
func (mr *MockMatcherMockRecorder) PrintTree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintTree", reflect.TypeOf((*MockMatcher)(nil).PrintTree))
}
